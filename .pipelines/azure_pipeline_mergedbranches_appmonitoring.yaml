# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
  batch: true
  branches:
    include:
    - appinsights/ai-ci-image

pr:
  branches:
    include:
    - ci_prod

variables:
  armServiceConnectionName: 'ci-1es-acr-connection'
  subscription: '9b96ebbd-c57a-42d1-bbe9-b69296e4c7fb'
  containerRegistry: 'containerinsightsprod'
  repoImageName: '${{ variables.containerRegistry }}.azurecr.io/public/azuremonitor/applicationinsights/aidev'
  IS_PR: $[eq(variables['Build.Reason'], 'PullRequest')]

jobs:
- job: common
  variables:
    Codeql.SkipTaskAutoInjection: true
  pool:
    name: Azure-Pipelines-CI-Test-EO
  steps:
  - task: ComponentGovernanceComponentDetection@0
  ## dev builds are in format Major.Minor.Patch-CommitAheadCount-CommitId
  ## prod release are in format Major.Minor.Patch
  ## preview release are in format preview-Major.Minor.Patch
  - bash: |
      commit=$(git describe) 
      imagetag="$commit"
      
      telemetryTag=$commit
      if [ -z "$TELEMETRY_TAG" ]
        then
          echo "\$TELEMETRY_TAG variable is not set"
        else
          telemetryTag=$TELEMETRY_TAG
          echo "\$TELEMETRY_TAG is $TELEMETRY_TAG"
      fi

      telemetryTag="$telemetryTag"
      
      echo "imagetag is $imagetag"
      echo "telemetryTag is $telemetryTag"
      
      echo "##vso[task.setvariable variable=imagetag;isOutput=true]$imagetag"
      echo "##vso[task.setvariable variable=telemetryTag;isOutput=true]$telemetryTag"
      
      cd $(Build.SourcesDirectory)/deployment/mergebranch-webhook-deployment/ServiceGroupRoot/Scripts
      tar -czvf ../artifacts.tar.gz pushWebhookToAcr.sh
    name: setup

  - task: CopyFiles@2
    displayName: "Copy ev2 deployment artifacts"
    inputs:
      SourceFolder: "$(Build.SourcesDirectory)/deployment"
      Contents: |
        **/*
      TargetFolder: '$(Build.ArtifactStagingDirectory)/build'

  - task: CopyFiles@2
    displayName: "Copy ev2 deployment scripts"
    inputs:
      SourceFolder: "$(Build.SourcesDirectory)/.pipelines"
      Contents: |
        **/*.sh
      TargetFolder: '$(Build.ArtifactStagingDirectory)/build'

  - task: CopyFiles@2
    displayName: "Copy ev2 deployment scripts"
    inputs:
      SourceFolder: "$(Build.SourcesDirectory)/kubernetes"
      Contents: |
        *.yaml
      TargetFolder: '$(Build.ArtifactStagingDirectory)/build'

  - task: CopyFiles@2
    displayName: "Copy ev2 deployment scripts"
    inputs:
      SourceFolder: "$(Build.SourcesDirectory)/charts"
      Contents: |
        **/*
      TargetFolder: '$(Build.ArtifactStagingDirectory)/build'

  - task: CopyFiles@2
    displayName: "Copy ev2 deployment scripts"
    inputs:
      SourceFolder: "$(Build.SourcesDirectory)/test/e2e"
      Contents: |
        *.yaml
      TargetFolder: '$(Build.ArtifactStagingDirectory)/build'

  - task: PublishBuildArtifacts@1
    inputs:
      pathToPublish: '$(Build.ArtifactStagingDirectory)'
      artifactName: drop

- job: build_windows_2022
  dependsOn:
  -  common
  pool:
    name: Azure-Pipelines-Windows-CI-Test-EO
  variables:
    imageTag: $[ dependencies.common.outputs['setup.imageTag'] ]
    telemetryTag: $[ dependencies.common.outputs['setup.telemetryTag'] ]
    Codeql.SkipTaskAutoInjection: true
  steps:
  - task: PowerShell@2
    inputs:
      targetType: 'filePath'
      filePath: $(System.DefaultWorkingDirectory)/scripts/build/windows/install-build-pre-requisites.ps1
    displayName: 'install prereqs'

  - script: |
      setlocal enabledelayedexpansion
      powershell.exe -ExecutionPolicy Unrestricted -NoProfile -WindowStyle Hidden -File "build\windows\Makefile.ps1"
      endlocal
      exit /B %ERRORLEVEL%
    displayName: 'build base'

  - task: AzureCLI@2
    displayName: "Docker windows build for ltsc2022"
    inputs:
      azureSubscription: ${{ variables.armServiceConnectionName }}
      scriptType: ps
      scriptLocation: inlineScript
      inlineScript: |
        mkdir -p $(Build.ArtifactStagingDirectory)/windows
        cd appmonitoring/ts/src

        az --version
        az account show
        az account set -s ${{ variables.subscription }}
        az acr login -n ${{ variables.containerRegistry }}

        docker build --platform linux/amd64,linux/arm64 --isolation=hyperv --tag ${{ variables.repoImageName }}:$(imageTag) --build-arg IMAGE_TAG=$(telemetryTag) .
        if ("$(Build.Reason)" -ne "PullRequest") {
           docker push ${{ variables.repoImageName }}:$(imageTag)
        }
