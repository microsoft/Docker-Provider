# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
  batch: true
  branches:
    include:
    - ai_prod

pr:
  branches:
    include:
    - ai_prod

variables:
  armServiceConnectionName: 'ci-1es-acr-connection'
  subscription: '9b96ebbd-c57a-42d1-bbe9-b69296e4c7fb'
  containerRegistry: 'containerinsightsprod' # this build pushes the aidev image to the dev ACR (caution: ACR that has "prod" in its name is the dev one, the one without "prod" is prod AME)
  repoImageName: '${{ variables.containerRegistry }}.azurecr.io/public/azuremonitor/applicationinsights/aidev'
  IS_PR: $[eq(variables['Build.Reason'], 'PullRequest')]

jobs:
- job: common
  variables:
    Codeql.SkipTaskAutoInjection: true
  pool:
    name: Azure-Pipelines-CI-Test-EO
  steps:
  - checkout: self
    fetchDepth: 0
    fetchTags: true
  - task: ComponentGovernanceComponentDetection@0
  ## dev builds are in format Major.Minor.Patch-CommitAheadCount-CommitId
  ## prod release are in format Major.Minor.Patch
  ## preview release are in format preview-Major.Minor.Patch
  - bash: |
      commit=$(git describe)
      imageTag="$commit"
            
      echo "imageTag is $imageTag"
      
      echo "##vso[task.setvariable variable=imageTag;isOutput=true]$imageTag"
      
      cd $(Build.SourcesDirectory)/deployment/mergebranch-webhook-deployment/ServiceGroupRoot/Scripts
      tar -czvf ../artifacts.tar.gz pushWebhookToAcr.sh
    name: setup

  - task: CopyFiles@2
    displayName: "Copy ev2 deployment artifacts"
    inputs:
      SourceFolder: "$(Build.SourcesDirectory)/deployment"
      Contents: |
        **/*
      TargetFolder: '$(Build.ArtifactStagingDirectory)/build'

  - task: CopyFiles@2
    displayName: "Copy ev2 deployment scripts"
    inputs:
      SourceFolder: "$(Build.SourcesDirectory)/.pipelines"
      Contents: |
        **/*.sh
      TargetFolder: '$(Build.ArtifactStagingDirectory)/build'

  - task: CopyFiles@2
    displayName: "Copy ev2 deployment scripts"
    inputs:
      SourceFolder: "$(Build.SourcesDirectory)/kubernetes"
      Contents: |
        *.yaml
      TargetFolder: '$(Build.ArtifactStagingDirectory)/build'

  - task: CopyFiles@2
    displayName: "Copy ev2 deployment scripts"
    inputs:
      SourceFolder: "$(Build.SourcesDirectory)/charts"
      Contents: |
        **/*
      TargetFolder: '$(Build.ArtifactStagingDirectory)/build'

  - task: CopyFiles@2
    displayName: "Copy ev2 deployment scripts"
    inputs:
      SourceFolder: "$(Build.SourcesDirectory)/test/e2e"
      Contents: |
        *.yaml
      TargetFolder: '$(Build.ArtifactStagingDirectory)/build'

  - task: PublishBuildArtifacts@1
    inputs:
      pathToPublish: '$(Build.ArtifactStagingDirectory)'
      artifactName: drop

- job: build_linux
  timeoutInMinutes: 120
  dependsOn: common
  pool:
    name: Azure-Pipelines-CI-Test-EO
  variables:
    imageTag: $[ dependencies.common.outputs['setup.imageTag'] ]
    Codeql.Enabled: true
    Codeql.BuildIdentifier: 'linuxbuild'
    # This is necessary because of: https://github.com/moby/moby/issues/37965
    DOCKER_BUILDKIT: 1

  steps:
  - task: CodeQL3000Init@0
  - task: AzureCLI@2
    displayName: "Multi-arch Linux build and Vulnerability Scan"
    inputs:
      azureSubscription: ${{ variables.armServiceConnectionName }}
      scriptType: bash
      scriptLocation: inlineScript
      inlineScript: |
        mkdir -p $(Build.ArtifactStagingDirectory)/linux

        echo "Installing NPM..."
        sudo apt-get -y install npm

        echo "Switching the directory..."
        cd appmonitoring/ts/src
        pwd
        ls -a
        
        echo "Installing typescript..."
        sudo npm install typescript

        echo "Updating packages..."
        npm update
        
        echo "Building the typescript project..."
        tsc --build --force
        
        if [ $? -ne 0 ]
        then
          echo "Build failed"
          exit 1
        fi

        echo "Build is done"

        echo "Running ESLint..."
        npx eslint .

        if [ $? -ne 0 ]
        then
          echo "ESLint failed"
          exit 1
        fi

        echo "ESLint is done"

        echo "Running Jest..."
        npm test

        if [ $? -ne 0 ]
        then
          echo "Jest failed"
          exit 1
        fi

        echo "Jest is done"
        
        pwd
        ls -a
        
        sudo apt-get update && sudo apt-get -y install qemu binfmt-support qemu-user-static
        docker run --rm --privileged multiarch/qemu-user-static --reset -p yes

        docker buildx create --name testbuilder
        docker buildx use testbuilder

        az --version
        az account show
        az account set -s ${{ variables.subscription }}
        az acr login -n ${{ variables.containerRegistry }}

        echo "Build reason = $(Build.Reason)"
        
        if [ "$(Build.Reason)" != "PullRequest" ]; then
          docker buildx build --platform linux/amd64,linux/arm64 --tag ${{ variables.repoImageName }}:$(imageTag) -f ./Dockerfile --metadata-file $(Build.ArtifactStagingDirectory)/linux/metadata.json --push --provenance=false .

          docker pull ${{ variables.repoImageName }}:$(imageTag)
        else
          docker buildx build --platform linux/amd64,linux/arm64 --tag ${{ variables.repoImageName }}:$(imageTag) -f ./Dockerfile --metadata-file $(Build.ArtifactStagingDirectory)/linux/metadata.json --provenance=false .

          # load the multi-arch image to run tests
          docker buildx build --tag ${{ variables.repoImageName }}:$(imageTag) -f ./Dockerfile --metadata-file $(Build.ArtifactStagingDirectory)/linux/metadata.json --load --provenance=false .
        fi

        curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin

        echo ".trivyignore file:"
        cat .trivyignore

        trivy image --ignore-unfixed --format json --no-progress --severity HIGH,CRITICAL,MEDIUM --exit-code 1 ${{ variables.repoImageName }}:$(imageTag)
  - task: CodeQL3000Finalize@0
  - task: PublishBuildArtifacts@1
    inputs:
      pathToPublish: '$(Build.ArtifactStagingDirectory)'
      artifactName: drop
