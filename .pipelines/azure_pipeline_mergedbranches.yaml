# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
  batch: true
  branches:
    include:
    - ci_prod

pr:
  branches:
    include:
    - ci_prod

variables:
  armServiceConnectionName: 'ci-1es-acr-connection'
  subscription: '9b96ebbd-c57a-42d1-bbe9-b69296e4c7fb'
  containerRegistry: 'containerinsightsprod'
  repoImageName: '${{ variables.containerRegistry }}.azurecr.io/public/azuremonitor/containerinsights/cidev'
  IS_PR: $[eq(variables['Build.Reason'], 'PullRequest')]
  IS_MAIN_BRANCH: $[eq(variables['Build.SourceBranchName'], 'ci_prod')]
  IS_RELEASE: $[ne(variables['TELEMETRY_TAG'], '')]
  appRegistrationClientId: '$[variables['APP_REGISTRATION_CLIENT_ID']]'
  appRegistrationTenantId: '$[variables['APP_REGISTRATION_TENANT_ID']]'
  authAKVName: '$[variables['AUTH_AKV_NAME']]'
  authCertName: '$[variables['AUTH_CERT_NAME']]'
  authSignCertName: '$[variables['AUTH_SIGN_CERT_NAME']]'

jobs:
- job: common
  variables:
    Codeql.SkipTaskAutoInjection: true
  pool:
    name: Azure-Pipelines-CI-Test-EO
  steps:
  - task: ComponentGovernanceComponentDetection@0
  ## dev builds are in format Major.Minor.Patch-CommitAheadCount-CommitId
  ## prod release are in format Major.Minor.Patch
  ## preview release are in format preview-Major.Minor.Patch
  - bash: |
      commit=$(git describe)
      datetime=$(date +%Y%m%d%H%M%S)
      linuxImagetag="$commit"-"$datetime"
      windowsImageTag=win-"$commit"-"$datetime"

      telemetryTag=$linuxImagetag
      if [ -z "$TELEMETRY_TAG" ]
        then
          echo "\$TELEMETRY_TAG variable is not set"
        else
          telemetryTag=$TELEMETRY_TAG
          echo "\$TELEMETRY_TAG is $TELEMETRY_TAG"
      fi

      linuxTelemetryTag="$telemetryTag"
      windowsTelemetryTag=win-"$telemetryTag"

      echo "linuxImagetag is $linuxImagetag"
      echo "windowsImageTag is $windowsImageTag"
      echo "linuxTelemetryTag is $linuxTelemetryTag"
      echo "windowsTelemetryTag is $windowsTelemetryTag"

      echo "##vso[task.setvariable variable=linuxImagetag;isOutput=true]$linuxImagetag"
      echo "##vso[task.setvariable variable=windowsImageTag;isOutput=true]$windowsImageTag"
      echo "##vso[task.setvariable variable=linuxTelemetryTag;isOutput=true]$linuxTelemetryTag"
      echo "##vso[task.setvariable variable=windowsTelemetryTag;isOutput=true]$windowsTelemetryTag"

      echo "appRegistrationClientId is $APP_REGISTRATION_CLIENT_ID"
      echo "appRegistrationTenantId is $APP_REGISTRATION_TENANT_ID"
      echo "authAKVName is $AUTH_AKV_NAME"
      echo "authCertName is $AUTH_CERT_NAME"
      echo "authSignCertName is $AUTH_SIGN_CERT_NAME"

      cd $(Build.SourcesDirectory)/deployment/mergebranch-multiarch-agent-deployment/ServiceGroupRoot/Scripts
      tar -czvf ../artifacts.tar.gz pushAgentToAcr.sh

      cd $(Build.SourcesDirectory)/deployment/arc-k8s-extension/ServiceGroupRoot/Scripts
      tar -czvf ../artifacts.tar.gz ../../../../charts/azuremonitor-containers/ pushChartToAcr.sh
    
      cd $(Build.SourcesDirectory)/deployment/arc-k8s-extension-release-v2/ServiceGroupRoot/Scripts
      tar -czvf ../artifacts.tar.gz arcExtensionRelease.sh

      windowsAMAUrl=""
      if [ -z "$WINDOWS_AMA_URL" ]
        then
          echo "\$WINDOWS_AMA_URL variable is not set"
        else
          windowsAMAUrl=$WINDOWS_AMA_URL
          echo "\$WINDOWS_AMA_URL is $WINDOWS_AMA_URL"
      fi
      echo "##vso[task.setvariable variable=windowsAMAUrl;isOutput=true]$windowsAMAUrl"
    name: setup

  - task: CredScan@3
    displayName: "SDL : Run credscan"
  
  - task: CopyFiles@2
    displayName: "Copy ev2 deployment artifacts"
    inputs:
      SourceFolder: "$(Build.SourcesDirectory)/deployment"
      Contents: |
        **/*
      TargetFolder: '$(Build.ArtifactStagingDirectory)/build'

  - task: CopyFiles@2
    displayName: "Copy ev2 deployment scripts"
    inputs:
      SourceFolder: "$(Build.SourcesDirectory)/.pipelines"
      Contents: |
        **/*.sh
      TargetFolder: '$(Build.ArtifactStagingDirectory)/build'

  - task: CopyFiles@2
    displayName: "Copy ev2 deployment scripts"
    inputs:
      SourceFolder: "$(Build.SourcesDirectory)/kubernetes"
      Contents: |
        *.yaml
      TargetFolder: '$(Build.ArtifactStagingDirectory)/build'

  - task: CopyFiles@2
    displayName: "Copy ev2 deployment scripts"
    inputs:
      SourceFolder: "$(Build.SourcesDirectory)/charts"
      Contents: |
        **/*
      TargetFolder: '$(Build.ArtifactStagingDirectory)/build'

  - task: CopyFiles@2
    displayName: "Copy ev2 deployment scripts"
    inputs:
      SourceFolder: "$(Build.SourcesDirectory)/test/e2e"
      Contents: |
        *.yaml
      TargetFolder: '$(Build.ArtifactStagingDirectory)/build'

  - task: PublishBuildArtifacts@1
    inputs:
      pathToPublish: '$(Build.ArtifactStagingDirectory)'
      artifactName: drop
  
  - task: Armory@2
    displayName: 'Run ARMory'
    inputs:
      toolVersion: Latest
      targetDirectory: '$(Build.SourcesDirectory)'

- job: build_linux
  timeoutInMinutes: 120
  dependsOn: common
  pool:
    name: Azure-Pipelines-CI-Test-EO
  variables:
    linuxImagetag: $[ dependencies.common.outputs['setup.linuxImagetag'] ]
    linuxTelemetryTag: $[ dependencies.common.outputs['setup.linuxTelemetryTag'] ]
    Codeql.Enabled: true
    Codeql.BuildIdentifier: 'linuxbuild'
    # This is necessary because of: https://github.com/moby/moby/issues/37965
    DOCKER_BUILDKIT: 1

  steps:
  - task: CodeQL3000Init@0
    condition: eq(variables.IS_MAIN_BRANCH, true)

  - task: AzureCLI@2
    displayName: "Multi-arch Linux build"
    inputs:
      azureSubscription: ${{ variables.armServiceConnectionName }}
      scriptType: bash
      scriptLocation: inlineScript
      inlineScript: |
        mkdir -p $(Build.ArtifactStagingDirectory)/linux

        sudo apt-get update && sudo apt-get -y install qemu binfmt-support qemu-user-static
        docker system prune --all -f
        docker run --rm --privileged multiarch/qemu-user-static --reset -p yes

        docker buildx create --name testbuilder
        docker buildx use testbuilder

        az --version
        az account show
        az account set -s ${{ variables.subscription }}
        az acr login -n ${{ variables.containerRegistry }}

        if [ "$(Build.Reason)" != "PullRequest" ]; then
          docker buildx build --platform $(BUILD_PLATFORMS) --tag ${{ variables.repoImageName }}:$(linuxImagetag) -f kubernetes/linux/Dockerfile.multiarch --metadata-file $(Build.ArtifactStagingDirectory)/linux/metadata.json --build-arg IMAGE_TAG=$(linuxTelemetryTag) --build-arg GOLANG_BASE_IMAGE=$(GOLANG_BASE_IMAGE) --build-arg CI_BASE_IMAGE=$(CI_BASE_IMAGE) --push --provenance=false .

          docker pull ${{ variables.repoImageName }}:$(linuxImagetag)
        else
          docker buildx build --platform $(BUILD_PLATFORMS) --tag ${{ variables.repoImageName }}:$(linuxImagetag) -f kubernetes/linux/Dockerfile.multiarch --metadata-file $(Build.ArtifactStagingDirectory)/linux/metadata.json --build-arg IMAGE_TAG=$(linuxTelemetryTag) --build-arg GOLANG_BASE_IMAGE=$(GOLANG_BASE_IMAGE) --build-arg CI_BASE_IMAGE=$(CI_BASE_IMAGE) --provenance=false .

          # load the multi-arch image to run tests
          docker buildx build --tag ${{ variables.repoImageName }}:$(linuxImagetag) -f kubernetes/linux/Dockerfile.multiarch --metadata-file $(Build.ArtifactStagingDirectory)/linux/metadata.json --build-arg IMAGE_TAG=$(linuxTelemetryTag) --build-arg GOLANG_BASE_IMAGE=$(GOLANG_BASE_IMAGE) --build-arg CI_BASE_IMAGE=$(CI_BASE_IMAGE) --load --provenance=false .
        fi

  - bash: |
        curl -LO "https://github.com/oras-project/oras/releases/download/v1.0.0/oras_1.0.0_linux_amd64.tar.gz"
        mkdir -p oras-install/
        tar -zxf oras_1.0.0_*.tar.gz -C oras-install/
        sudo mv oras-install/oras /usr/local/bin/
        rm -rf oras_1.0.0_*.tar.gz oras-install/

        TARGET_ARTIFACT=$(oras manifest fetch ${{ variables.repoImageName }}:$(linuxImagetag) --descriptor)
        cat <<EOF >>$(Build.ArtifactStagingDirectory)/linux/payload.json
        {"targetArtifact":$TARGET_ARTIFACT}
        EOF
        cat $(Build.ArtifactStagingDirectory)/linux/payload.json
    workingDirectory: $(Build.ArtifactStagingDirectory)/linux/
    displayName: "Install oras and build the payload json file"
    condition: eq(variables.IS_PR, false)

  - task: EsrpCodeSigning@5
    condition: eq(variables.IS_PR, false)
    inputs:
      ConnectedServiceName: 'AME ESRPContainerInsights MSI Service Connection'
      AppRegistrationClientId: ${{ variables.appRegistrationClientId }}
      AppRegistrationTenantId: ${{ variables.appRegistrationTenantId }}
      AuthAKVName: ${{ variables.authAKVName }}
      AuthCertName: ${{ variables.authCertName }}
      AuthSignCertName: ${{ variables.authSignCertName }}
      FolderPath: '$(Build.ArtifactStagingDirectory)/linux'
      Pattern: 'payload.json'
      signConfigType: 'inlineSignParams'
      inlineOperation: |
        [
                    {
                        "keyCode": "CP-469451",
                        "operationSetCode": "NotaryCoseSign",
                        "parameters": [
                          {
                            "parameterName": "CoseFlags",
                            "parameterValue": "chainunprotected"
                          }
                        ],
                        "toolName": "sign",
                        "toolVersion": "1.0"
                    }
                  ]
      SessionTimeout: '60'
      MaxConcurrency: '50'
      MaxRetryAttempts: '5'
      PendingAnalysisWaitTimeoutMinutes: '5'
    displayName: 'Esrp Image Signing for linux image'

  - bash: |
        set -euxo pipefail
        oras attach ${{ variables.repoImageName }}:$(linuxImagetag) \
          --artifact-type 'application/vnd.cncf.notary.signature' \
          ./payload.json:application/cose \
          -a "io.cncf.notary.x509chain.thumbprint#S256=[\"49D6CD5DB42623144D6990AA1669CE5D97F1F3D7\"]"
    workingDirectory: $(Build.ArtifactStagingDirectory)/linux/
    displayName: "ORAS Push Artifacts in $(Build.ArtifactStagingDirectory)/linux/"
    condition: eq(variables.IS_PR, false)

  - bash: |
        set -euxo pipefail
        oras attach ${{ variables.repoImageName }}:$(linuxImagetag) \
            --artifact-type 'application/vnd.microsoft.artifact.lifecycle' \
            --annotation "vnd.microsoft.artifact.lifecycle.end-of-life.date=$(date -u -d '-1 hour' +"%Y-%m-%dT%H:%M:%SZ")"
    workingDirectory: $(Build.ArtifactStagingDirectory)/linux/
    displayName: "ORAS Push Artifacts in $(Build.ArtifactStagingDirectory)/linux/"
    condition: eq(variables.IS_RELEASE, false)

  - task: AzureCLI@2
    displayName: "Vulnerability Scan with Trivy"
    inputs:
      azureSubscription: ${{ variables.armServiceConnectionName }}
      scriptType: bash
      scriptLocation: inlineScript
      inlineScript: |
        curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin

        trivy image --ignore-unfixed --no-progress --severity HIGH,CRITICAL,MEDIUM --exit-code 1 ${{ variables.repoImageName }}:$(linuxImagetag)
  
  - bash: |
        cd $(System.DefaultWorkingDirectory)/build/linux/
        ls
        make
    displayName: 'Execute Makefile for Linux Build'
  
  - task: CodeQL3000Finalize@0
    condition: eq(variables.IS_MAIN_BRANCH, true)

  - task: AzureArtifacts.manifest-generator-task.manifest-generator-task.ManifestGeneratorTask@0
    displayName: 'Generation Task'
    condition: eq(variables.IS_PR, true)
    inputs:
      BuildDropPath: '$(Build.ArtifactStagingDirectory)/linux'
      DockerImagesToScan: '$(GOLANG_BASE_IMAGE),$(CI_BASE_IMAGE)'

  - task: AzureArtifacts.manifest-generator-task.manifest-generator-task.ManifestGeneratorTask@0
    displayName: 'Generation Task'
    condition: eq(variables.IS_PR, false)
    inputs:
      BuildDropPath: '$(Build.ArtifactStagingDirectory)/linux'
      DockerImagesToScan: '$(GOLANG_BASE_IMAGE),$(CI_BASE_IMAGE),${{ variables.repoImageName }}:$(linuxImagetag)'

  - task: ComponentGovernanceComponentDetection@0
    condition: eq(variables.IS_PR, true)
    inputs:
      DockerImagesToScan: '$(GOLANG_BASE_IMAGE),$(CI_BASE_IMAGE)'

  - task: ComponentGovernanceComponentDetection@0
    condition: eq(variables.IS_PR, false)
    inputs:
      DockerImagesToScan: '$(GOLANG_BASE_IMAGE),$(CI_BASE_IMAGE),${{ variables.repoImageName }}:$(linuxImagetag)'

  - task: PublishBuildArtifacts@1
    inputs:
      pathToPublish: '$(Build.ArtifactStagingDirectory)'
      artifactName: drop

- job: build_windows_2019
  timeoutInMinutes: 120
  dependsOn:
  -  common
  pool:
    name: Azure-Pipelines-Windows-CI-Test-EO
  variables:
    windowsImageTag: $[ dependencies.common.outputs['setup.windowsImageTag'] ]
    windowsTelemetryTag: $[ dependencies.common.outputs['setup.windowsTelemetryTag'] ]
    windows2019BaseImageVersion: ltsc2019
    Codeql.Enabled: true
    Codeql.BuildIdentifier: 'windowsbuild'
    windowsAMAUrl: $[ dependencies.common.outputs['setup.windowsAMAUrl'] ]
  steps:
  - task: PowerShell@2
    inputs:
      targetType: 'filePath'
      filePath: $(System.DefaultWorkingDirectory)/scripts/build/windows/install-build-pre-requisites.ps1
    displayName: 'install prereqs'

  - task: CodeQL3000Init@0
    condition: eq(variables.IS_MAIN_BRANCH, true)
  - script: |
      setlocal enabledelayedexpansion
      powershell.exe -ExecutionPolicy Unrestricted -NoProfile -WindowStyle Hidden -File "build\windows\Makefile.ps1"
      endlocal
      exit /B %ERRORLEVEL%
    displayName: 'build base'

  - task: AzureCLI@2
    displayName: "Docker windows build for ltsc2019"
    inputs:
      azureSubscription: ${{ variables.armServiceConnectionName }}
      scriptType: ps
      scriptLocation: inlineScript
      inlineScript: |
        mkdir -p $(Build.ArtifactStagingDirectory)/windows
        cd kubernetes/windows

        az --version
        az account show
        az account set -s ${{ variables.subscription }}
        az acr login -n ${{ variables.containerRegistry }}

        docker build --isolation=hyperv --tag ${{ variables.repoImageName }}:$(windowsImageTag)-$(windows2019BaseImageVersion)-unsigned --build-arg WINDOWS_VERSION=$(windows2019BaseImageVersion) --build-arg IMAGE_TAG=$(windowsTelemetryTag) --build-arg WINDOWS_AMA_URL=$(windowsAMAUrl) .

  - task: PowerShell@2
    displayName: Extract files to sign
    inputs:
      targetType: 'inline'
      script: |
        echo "Creating docker container..."
        docker create --name signingContainer ${{ variables.repoImageName }}:$(windowsImageTag)-$(windows2019BaseImageVersion)-unsigned

        echo "Creating fist party directory..."
        mkdir -p $(Build.ArtifactStagingDirectory)/fpSigning
        cd $(Build.ArtifactStagingDirectory)/fpSigning

        echo "Extract CertificateGenerator"
        docker cp signingContainer:C:\opt\amalogswindows\certgenerator\CertificateGenerator.exe .
        docker cp signingContainer:C:\opt\amalogswindows\certgenerator\CertificateGenerator.dll .

        echo "Extract LivenessProbe"
        docker cp signingContainer:C:\opt\amalogswindows\scripts\cmd\livenessprobe.exe .

        echo "Extract ps scripts"
        docker cp signingContainer:C:\opt\amalogswindows\scripts\powershell .

        echo "Creating OSS directory..."
        mkdir -p $(Build.ArtifactStagingDirectory)/ossSigning
        cd $(Build.ArtifactStagingDirectory)/ossSigning

        echo "Extract CertificateGenerator"
        docker cp signingContainer:C:\opt\amalogswindows\certgenerator\BouncyCastle.Crypto.dll .
        docker cp signingContainer:C:\opt\amalogswindows\certgenerator\Newtonsoft.Json.dll .

        echo "Extract fluent-bit"
        docker cp signingContainer:C:\opt\fluent-bit .
        
        echo "Extract Ruby"
        docker cp signingContainer:C:\ruby31 .

        echo "Extract telegraf"
        docker cp signingContainer:C:\opt\telegraf\telegraf.exe .

        echo "Extract out oms"
        docker cp signingContainer:C:\opt\amalogswindows\out_oms.so .

        echo "Extract containerinventory.so"
        docker cp signingContainer:C:\opt\fluent-bit\bin\containerinventory.so .

        echo "Extract perf.so"
        docker cp signingContainer:C:\opt\fluent-bit\bin\perf.so .

        echo "Removing container..."
        docker rm signingContainer

        echo "List ArtifactStagingDirectory"
        ls $(Build.ArtifactStagingDirectory)
        ls .

  - script: dir $(System.DefaultWorkingDirectory)
    displayName: 'List files in DefaultWorking Directory'

  - script: dir $(Build.ArtifactStagingDirectory)
    displayName: 'List files in Staging Directory'

  - task: EsrpCodeSigning@5
    inputs:
      ConnectedServiceName: 'AME ESRPContainerInsights MSI Service Connection'
      AppRegistrationClientId: ${{ variables.appRegistrationClientId }}
      AppRegistrationTenantId: ${{ variables.appRegistrationTenantId }}
      AuthAKVName: ${{ variables.authAKVName }}
      AuthCertName: ${{ variables.authCertName }}
      AuthSignCertName: ${{ variables.authSignCertName }}
      FolderPath: '$(Build.ArtifactStagingDirectory)/fpSigning'
      Pattern: '*.dll,*.exe,*.so,*.ps1'
      signConfigType: 'inlineSignParams'
      inlineOperation: |
        [
                {
                    "KeyCode" : "CP-230012",
                    "OperationCode" : "SigntoolSign",
                    "Parameters" : {
                        "OpusName" : "Microsoft",
                        "OpusInfo" : "http://www.microsoft.com",
                        "FileDigest" : "/fd \"SHA256\"",
                        "PageHash" : "/NPH",
                        "TimeStamp" : "/tr \"http://rfc3161.gtm.corp.microsoft.com/TSS/HttpTspServer\" /td sha256"
                    },
                    "ToolName" : "sign",
                    "ToolVersion" : "1.0"
                },
                {
                    "KeyCode" : "CP-230012",
                    "OperationCode" : "SigntoolVerify",
                    "Parameters" : {},
                    "ToolName" : "sign",
                    "ToolVersion" : "1.0"
                }
            ]
      SessionTimeout: '60'
      MaxConcurrency: '50'
      MaxRetryAttempts: '5'
    displayName: 'EsrpCodeSigning for first party'

  - task: EsrpCodeSigning@5
    inputs:
      ConnectedServiceName: 'AME ESRPContainerInsights MSI Service Connection'
      AppRegistrationClientId: ${{ variables.appRegistrationClientId }}
      AppRegistrationTenantId: ${{ variables.appRegistrationTenantId }}
      AuthAKVName: ${{ variables.authAKVName }}
      AuthCertName: ${{ variables.authCertName }}
      AuthSignCertName: ${{ variables.authSignCertName }}
      FolderPath: '$(Build.ArtifactStagingDirectory)/ossSigning'
      Pattern: '*.dll,*.exe,*.so'
      signConfigType: 'inlineSignParams'
      inlineOperation: |
        [
                {
                    "KeyCode" : "CP-231522",
                    "OperationCode" : "SigntoolSign",
                    "Parameters" : {
                        "OpusName" : "Microsoft",
                        "OpusInfo" : "http://www.microsoft.com",
                        "Append" : "/as",
                        "FileDigest" : "/fd \"SHA256\"",
                        "PageHash" : "/NPH",
                        "TimeStamp" : "/tr \"http://rfc3161.gtm.corp.microsoft.com/TSS/HttpTspServer\" /td sha256"
                    },
                    "ToolName" : "sign",
                    "ToolVersion" : "1.0"
                },
                {
                    "KeyCode" : "CP-231522",
                    "OperationCode" : "SigntoolVerify",
                    "Parameters" : {},
                    "ToolName" : "sign",
                    "ToolVersion" : "1.0"
                }
            ]
      SessionTimeout: '60'
      MaxConcurrency: '50'
      MaxRetryAttempts: '5'
    displayName: 'EsrpCodeSigning for OSS'

  - task: BinSkim@4
    displayName: 'SDL: run binskim'
    inputs:
      InputType: 'CommandLine'
      arguments: 'analyze --rich-return-code $(Build.ArtifactStagingDirectory)\ossSigning\out_oms.so $(Build.ArtifactStagingDirectory)\ossSigning\perf.so $(Build.ArtifactStagingDirectory)\ossSigning\containerinventory.so $(Build.ArtifactStagingDirectory)\fpSigning\livenessprobe.exe $(Build.ArtifactStagingDirectory)\fpSigning\CertificateGenerator.exe $(Build.ArtifactStagingDirectory)\fpSigning\CertificateGenerator.dll'
    retryCountOnTaskFailure: 1

  - task: PoliCheck@2
    displayName: "SDL : Run PoliCheck"
    inputs:
      targetType: 'F'
      targetArgument: '$(Build.SourcesDirectory)'

  - task: PowerShell@2
    displayName: Replace files in origin Image
    inputs:
      targetType: 'inline'
      script: |
        docker create --name pushContainer ${{ variables.repoImageName }}:$(windowsImageTag)-$(windows2019BaseImageVersion)-unsigned
        
        echo "Copy Signed binaries/folders back to docker image..."
        docker cp $(Build.ArtifactStagingDirectory)/fpSigning/CertificateGenerator.exe pushContainer:C:\opt\amalogswindows\certgenerator\CertificateGenerator.exe
        docker cp $(Build.ArtifactStagingDirectory)/fpSigning/CertificateGenerator.dll pushContainer:C:\opt\amalogswindows\certgenerator\CertificateGenerator.dll
        docker cp $(Build.ArtifactStagingDirectory)/fpSigning/livenessprobe.exe pushContainer:C:\opt\amalogswindows\scripts\cmd\livenessprobe.exe
        docker cp $(Build.ArtifactStagingDirectory)/fpSigning/powershell/. pushContainer:C:\opt\amalogswindows\scripts\powershell/

        docker cp $(Build.ArtifactStagingDirectory)/ossSigning/BouncyCastle.Crypto.dll pushContainer:C:\opt\amalogswindows\certgenerator\BouncyCastle.Crypto.dll
        docker cp $(Build.ArtifactStagingDirectory)/ossSigning/Newtonsoft.Json.dll pushContainer:C:\opt\amalogswindows\certgenerator\Newtonsoft.Json.dll
        docker cp $(Build.ArtifactStagingDirectory)/ossSigning/fluent-bit/. pushContainer:C:\opt\fluent-bit/
        docker cp $(Build.ArtifactStagingDirectory)/ossSigning/ruby31/. pushContainer:C:\ruby31/
        docker cp $(Build.ArtifactStagingDirectory)/ossSigning/telegraf.exe pushContainer::C:\opt\telegraf\telegraf.exe
        docker cp $(Build.ArtifactStagingDirectory)/ossSigning/out_oms.so pushContainer:C:\opt\amalogswindows\out_oms.so

        docker commit pushContainer ${{ variables.repoImageName }}:$(windowsImageTag)-$(windows2019BaseImageVersion)
        docker rm pushContainer

  - task: PowerShell@2
    displayName: Push Docker Image
    inputs:
      targetType: 'inline'
      script: |
        if ("$(Build.Reason)" -ne "PullRequest") {
          docker push ${{ variables.repoImageName }}:$(windowsImageTag)-$(windows2019BaseImageVersion)
        }
  - task: CodeQL3000Finalize@0
    condition: eq(variables.IS_MAIN_BRANCH, true)

- job: build_windows_2022
  timeoutInMinutes: 120
  dependsOn:
  -  common
  pool:
    name: Azure-Pipelines-Windows-CI-Test-EO
  variables:
    windowsImageTag: $[ dependencies.common.outputs['setup.windowsImageTag'] ]
    windowsTelemetryTag: $[ dependencies.common.outputs['setup.windowsTelemetryTag'] ]
    windows2022BaseImageVersion: ltsc2022
    Codeql.SkipTaskAutoInjection: true
    windowsAMAUrl: $[ dependencies.common.outputs['setup.windowsAMAUrl'] ]
  steps:
  - task: PowerShell@2
    inputs:
      targetType: 'filePath'
      filePath: $(System.DefaultWorkingDirectory)/scripts/build/windows/install-build-pre-requisites.ps1
    displayName: 'install prereqs'

  - task: CodeQL3000Init@0
    condition: eq(variables.IS_MAIN_BRANCH, true)

  - script: |
      setlocal enabledelayedexpansion
      powershell.exe -ExecutionPolicy Unrestricted -NoProfile -WindowStyle Hidden -File "build\windows\Makefile.ps1"
      endlocal
      exit /B %ERRORLEVEL%
    displayName: 'build base'

  - task: AzureCLI@2
    displayName: "Docker windows build for ltsc2022"
    inputs:
      azureSubscription: ${{ variables.armServiceConnectionName }}
      scriptType: ps
      scriptLocation: inlineScript
      inlineScript: |
        mkdir -p $(Build.ArtifactStagingDirectory)/windows
        cd kubernetes/windows

        az --version
        az account show
        az account set -s ${{ variables.subscription }}
        az acr login -n ${{ variables.containerRegistry }}

        docker build --isolation=hyperv --tag ${{ variables.repoImageName }}:$(windowsImageTag)-$(windows2022BaseImageVersion)-unsigned --build-arg WINDOWS_VERSION=$(windows2022BaseImageVersion) --build-arg IMAGE_TAG=$(windowsTelemetryTag) --build-arg WINDOWS_AMA_URL=$(windowsAMAUrl) .

  - task: PowerShell@2
    displayName: Extract files to sign
    inputs:
      targetType: 'inline'
      script: |
        echo "Creating docker container..."
        docker create --name signingContainer ${{ variables.repoImageName }}:$(windowsImageTag)-$(windows2022BaseImageVersion)-unsigned

        echo "Creating fist party directory..."
        mkdir -p $(Build.ArtifactStagingDirectory)/fpSigning
        cd $(Build.ArtifactStagingDirectory)/fpSigning

        echo "Extract CertificateGenerator"
        docker cp signingContainer:C:\opt\amalogswindows\certgenerator\CertificateGenerator.exe .
        docker cp signingContainer:C:\opt\amalogswindows\certgenerator\CertificateGenerator.dll .

        echo "Extract LivenessProbe"
        docker cp signingContainer:C:\opt\amalogswindows\scripts\cmd\livenessprobe.exe .

        echo "Extract ps scripts"
        docker cp signingContainer:C:\opt\amalogswindows\scripts\powershell .

        echo "Creating OSS directory..."
        mkdir -p $(Build.ArtifactStagingDirectory)/ossSigning
        cd $(Build.ArtifactStagingDirectory)/ossSigning

        echo "Extract CertificateGenerator"
        docker cp signingContainer:C:\opt\amalogswindows\certgenerator\BouncyCastle.Crypto.dll .
        docker cp signingContainer:C:\opt\amalogswindows\certgenerator\Newtonsoft.Json.dll .

        echo "Extract fluent-bit"
        docker cp signingContainer:C:\opt\fluent-bit .
        
        echo "Extract Ruby"
        docker cp signingContainer:C:\ruby31 .

        echo "Extract telegraf"
        docker cp signingContainer:C:\opt\telegraf\telegraf.exe .

        echo "Extract out oms"
        docker cp signingContainer:C:\opt\amalogswindows\out_oms.so .

        echo "Extract containerinventory.so"
        docker cp signingContainer:C:\opt\fluent-bit\bin\containerinventory.so .

        echo "Extract perf.so"
        docker cp signingContainer:C:\opt\fluent-bit\bin\perf.so .

        echo "Removing container..."
        docker rm signingContainer

        echo "List ArtifactStagingDirectory"
        ls $(Build.ArtifactStagingDirectory)
        ls .

  - script: dir $(System.DefaultWorkingDirectory)
    displayName: 'List files in DefaultWorking Directory'

  - script: dir $(Build.ArtifactStagingDirectory)
    displayName: 'List files in Staging Directory'

  - task: EsrpCodeSigning@5
    inputs:
      ConnectedServiceName: 'AME ESRPContainerInsights MSI Service Connection'
      AppRegistrationClientId: ${{ variables.appRegistrationClientId }}
      AppRegistrationTenantId: ${{ variables.appRegistrationTenantId }}
      AuthAKVName: ${{ variables.authAKVName }}
      AuthCertName: ${{ variables.authCertName }}
      AuthSignCertName: ${{ variables.authSignCertName }}
      FolderPath: '$(Build.ArtifactStagingDirectory)/fpSigning'
      Pattern: '*.dll,*.exe,*.so,*.ps1'
      signConfigType: 'inlineSignParams'
      inlineOperation: |
        [
                {
                    "KeyCode" : "CP-230012",
                    "OperationCode" : "SigntoolSign",
                    "Parameters" : {
                        "OpusName" : "Microsoft",
                        "OpusInfo" : "http://www.microsoft.com",
                        "FileDigest" : "/fd \"SHA256\"",
                        "PageHash" : "/NPH",
                        "TimeStamp" : "/tr \"http://rfc3161.gtm.corp.microsoft.com/TSS/HttpTspServer\" /td sha256"
                    },
                    "ToolName" : "sign",
                    "ToolVersion" : "1.0"
                },
                {
                    "KeyCode" : "CP-230012",
                    "OperationCode" : "SigntoolVerify",
                    "Parameters" : {},
                    "ToolName" : "sign",
                    "ToolVersion" : "1.0"
                }
            ]
      SessionTimeout: '60'
      MaxConcurrency: '50'
      MaxRetryAttempts: '5'
    displayName: 'EsrpCodeSigning for first party'

  - task: EsrpCodeSigning@5
    inputs:
      ConnectedServiceName: 'AME ESRPContainerInsights MSI Service Connection'
      AppRegistrationClientId: ${{ variables.appRegistrationClientId }}
      AppRegistrationTenantId: ${{ variables.appRegistrationTenantId }}
      AuthAKVName: ${{ variables.authAKVName }}
      AuthCertName: ${{ variables.authCertName }}
      AuthSignCertName: ${{ variables.authSignCertName }}
      FolderPath: '$(Build.ArtifactStagingDirectory)/ossSigning'
      Pattern: '*.dll,*.exe,*.so'
      signConfigType: 'inlineSignParams'
      inlineOperation: |
        [
                {
                    "KeyCode" : "CP-231522",
                    "OperationCode" : "SigntoolSign",
                    "Parameters" : {
                        "OpusName" : "Microsoft",
                        "OpusInfo" : "http://www.microsoft.com",
                        "Append" : "/as",
                        "FileDigest" : "/fd \"SHA256\"",
                        "PageHash" : "/NPH",
                        "TimeStamp" : "/tr \"http://rfc3161.gtm.corp.microsoft.com/TSS/HttpTspServer\" /td sha256"
                    },
                    "ToolName" : "sign",
                    "ToolVersion" : "1.0"
                },
                {
                    "KeyCode" : "CP-231522",
                    "OperationCode" : "SigntoolVerify",
                    "Parameters" : {},
                    "ToolName" : "sign",
                    "ToolVersion" : "1.0"
                }
            ]
      SessionTimeout: '60'
      MaxConcurrency: '50'
      MaxRetryAttempts: '5'
    displayName: 'EsrpCodeSigning for OSS'

  - task: BinSkim@4
    displayName: 'SDL: run binskim'
    inputs:
      InputType: 'CommandLine'
      arguments: 'analyze --rich-return-code $(Build.ArtifactStagingDirectory)\ossSigning\out_oms.so $(Build.ArtifactStagingDirectory)\ossSigning\perf.so $(Build.ArtifactStagingDirectory)\ossSigning\containerinventory.so $(Build.ArtifactStagingDirectory)\fpSigning\livenessprobe.exe $(Build.ArtifactStagingDirectory)\fpSigning\CertificateGenerator.exe $(Build.ArtifactStagingDirectory)\fpSigning\CertificateGenerator.dll'
    retryCountOnTaskFailure: 1

  - task: PoliCheck@2
    displayName: "SDL : Run PoliCheck"
    inputs:
      targetType: 'F'
      targetArgument: '$(Build.SourcesDirectory)'

  - task: PowerShell@2
    displayName: Replace files in origin Image
    inputs:
      targetType: 'inline'
      script: |
        docker create --name pushContainer ${{ variables.repoImageName }}:$(windowsImageTag)-$(windows2022BaseImageVersion)-unsigned
        
        echo "Copy Signed binaries/folders back to docker image..."
        docker cp $(Build.ArtifactStagingDirectory)/fpSigning/CertificateGenerator.exe pushContainer:C:\opt\amalogswindows\certgenerator\CertificateGenerator.exe
        docker cp $(Build.ArtifactStagingDirectory)/fpSigning/CertificateGenerator.dll pushContainer:C:\opt\amalogswindows\certgenerator\CertificateGenerator.dll
        docker cp $(Build.ArtifactStagingDirectory)/fpSigning/livenessprobe.exe pushContainer:C:\opt\amalogswindows\scripts\cmd\livenessprobe.exe
        docker cp $(Build.ArtifactStagingDirectory)/fpSigning/powershell/. pushContainer:C:\opt\amalogswindows\scripts\powershell/

        docker cp $(Build.ArtifactStagingDirectory)/ossSigning/BouncyCastle.Crypto.dll pushContainer:C:\opt\amalogswindows\certgenerator\BouncyCastle.Crypto.dll
        docker cp $(Build.ArtifactStagingDirectory)/ossSigning/Newtonsoft.Json.dll pushContainer:C:\opt\amalogswindows\certgenerator\Newtonsoft.Json.dll
        docker cp $(Build.ArtifactStagingDirectory)/ossSigning/fluent-bit/. pushContainer:C:\opt\fluent-bit/
        docker cp $(Build.ArtifactStagingDirectory)/ossSigning/ruby31/. pushContainer:C:\ruby31/
        docker cp $(Build.ArtifactStagingDirectory)/ossSigning/telegraf.exe pushContainer::C:\opt\telegraf\telegraf.exe
        docker cp $(Build.ArtifactStagingDirectory)/ossSigning/out_oms.so pushContainer:C:\opt\amalogswindows\out_oms.so

        docker commit pushContainer ${{ variables.repoImageName }}:$(windowsImageTag)-$(windows2022BaseImageVersion)
        docker rm pushContainer

  - task: PowerShell@2
    displayName: Push Docker Image
    inputs:
      targetType: 'inline'
      script: |
        if ("$(Build.Reason)" -ne "PullRequest") {
          docker push ${{ variables.repoImageName }}:$(windowsImageTag)-$(windows2022BaseImageVersion)
        }
  - task: CodeQL3000Finalize@0
    condition: eq(variables.IS_MAIN_BRANCH, true)

- job: build_windows_multi_arc
  dependsOn:
  - common
  - build_windows_2019
  - build_windows_2022
  pool:
    name: Azure-Pipelines-Windows-CI-Test-EO
  variables:
    windowsImageTag: $[ dependencies.common.outputs['setup.windowsImageTag'] ]
    windowsTelemetryTag: $[ dependencies.common.outputs['setup.windowsTelemetryTag'] ]
    windows2019BaseImageVersion: ltsc2019
    windows2022BaseImageVersion: ltsc2022
    Codeql.SkipTaskAutoInjection: true
  steps:
  - task: AzureCLI@2
    displayName: "Docker windows build for multi-arc image"
    inputs:
      azureSubscription: ${{ variables.armServiceConnectionName }}
      scriptType: ps
      scriptLocation: inlineScript
      inlineScript: |
        mkdir -p $(Build.ArtifactStagingDirectory)/windows
        cd kubernetes/windows

        az --version
        az account show
        az account set -s ${{ variables.subscription }}
        az acr login -n ${{ variables.containerRegistry }}

        @{"image.name"="${{ variables.repoImageName }}:$(windowsImageTag)"} | ConvertTo-Json -Compress | Out-File -Encoding ascii $(Build.ArtifactStagingDirectory)/windows/metadata.json

        if ("$(Build.Reason)" -ne "PullRequest") {
           docker manifest create ${{ variables.repoImageName }}:$(windowsImageTag) ${{ variables.repoImageName }}:$(windowsImageTag)-$(windows2019BaseImageVersion) ${{ variables.repoImageName }}:$(windowsImageTag)-$(windows2022BaseImageVersion)
           docker manifest push ${{ variables.repoImageName }}:$(windowsImageTag)
        }
  - task: AzureArtifacts.manifest-generator-task.manifest-generator-task.ManifestGeneratorTask@0
    displayName: 'Generation Task'
    condition: eq(variables.IS_PR, true)
    inputs:
      BuildDropPath: '$(Build.ArtifactStagingDirectory)/windows'
      DockerImagesToScan: 'mcr.microsoft.com/windows/servercore:ltsc2019,mcr.microsoft.com/windows/servercore:ltsc2022'

  - task: AzureArtifacts.manifest-generator-task.manifest-generator-task.ManifestGeneratorTask@0
    displayName: 'Generation Task'
    condition: eq(variables.IS_PR, false)
    inputs:
      BuildDropPath: '$(Build.ArtifactStagingDirectory)/windows'
      DockerImagesToScan: 'mcr.microsoft.com/windows/servercore:ltsc2019,mcr.microsoft.com/windows/servercore:ltsc2022,${{ variables.repoImageName }}:$(windowsImageTag)'

  - powershell: |
      curl.exe -sLO  "https://github.com/oras-project/oras/releases/download/v1.0.0/oras_1.0.0_windows_amd64.zip"
      $currentDirectory = Get-Location
      Expand-Archive -Path $currentDirectory\oras_1.0.0_windows_amd64.zip -DestinationPath . -Force
      New-Item -ItemType Directory -Force -Path $env:USERPROFILE\bin
      Copy-Item -Path $currentDirectory\oras.exe -Destination "$env:USERPROFILE\bin\"
      $env:PATH = "$env:USERPROFILE\bin;$env:PATH"

      $output = oras manifest fetch ${{ variables.repoImageName }}:$(windowsImageTag) --descriptor
      $outputObject = $output | ConvertFrom-Json
      $payload = @{
          targetArtifact = $outputObject
      } | ConvertTo-Json -Depth 2
      $utf8NoBomEncoding = New-Object System.Text.UTF8Encoding $false
      [System.IO.File]::WriteAllLines("$(Build.ArtifactStagingDirectory)/windows/payload.json", $payload, $utf8NoBomEncoding)
      Get-Content "$(Build.ArtifactStagingDirectory)/windows/payload.json"
    workingDirectory: $(Build.ArtifactStagingDirectory)/windows
    displayName: "Install oras and build the payload json file"
    condition: eq(variables.IS_PR, false)

  - task: EsrpCodeSigning@5
    condition: eq(variables.IS_PR, false)
    inputs:
      ConnectedServiceName: 'AME ESRPContainerInsights MSI Service Connection'
      AppRegistrationClientId: ${{ variables.appRegistrationClientId }}
      AppRegistrationTenantId: ${{ variables.appRegistrationTenantId }}
      AuthAKVName: ${{ variables.authAKVName }}
      AuthCertName: ${{ variables.authCertName }}
      AuthSignCertName: ${{ variables.authSignCertName }}
      FolderPath: '$(Build.ArtifactStagingDirectory)/windows'
      Pattern: 'payload.json'
      signConfigType: 'inlineSignParams'
      inlineOperation: |
        [
                    {
                        "keyCode": "CP-469451",
                        "operationSetCode": "NotaryCoseSign",
                        "parameters": [
                          {
                            "parameterName": "CoseFlags",
                            "parameterValue": "chainunprotected"
                          }
                        ],
                        "toolName": "sign",
                        "toolVersion": "1.0"
                    }
                  ]
      SessionTimeout: '60'
      MaxConcurrency: '50'
      MaxRetryAttempts: '5'
      PendingAnalysisWaitTimeoutMinutes: '5'
    displayName: 'Esrp Image Signing for windows image'

  - powershell: |
      $env:PATH = "$env:USERPROFILE\bin;$env:PATH"
      oras attach ${{ variables.repoImageName }}:$(windowsImageTag) --artifact-type application/vnd.cncf.notary.signature ./payload.json:application/cose -a io.cncf.notary.x509chain.thumbprint#S256=[\"49D6CD5DB42623144D6990AA1669CE5D97F1F3D7\"]
    workingDirectory: $(Build.ArtifactStagingDirectory)/windows
    displayName: "Run oras attach"
    condition: eq(variables.IS_PR, false)

  - powershell: |
      $env:PATH = "$env:USERPROFILE\bin;$env:PATH"
      oras attach ${{ variables.repoImageName }}:$(windowsImageTag) --artifact-type 'application/vnd.microsoft.artifact.lifecycle' --annotation "vnd.microsoft.artifact.lifecycle.end-of-life.date=$(powershell -Command "(Get-Date).AddHours(-1).ToString('yyyy-MM-ddTHH:mm:ssZ')")"
    workingDirectory: $(Build.ArtifactStagingDirectory)/windows
    displayName: "Run oras attach"
    condition: eq(variables.IS_RELEASE, false)

  - task: PublishBuildArtifacts@1
    inputs:
      pathToPublish: '$(Build.ArtifactStagingDirectory)'
      artifactName: drop
  
  - task: AntiMalware@4
    displayName: 'Run MpCmdRun.exe'
    inputs:
      InputType: Basic
      ScanType: CustomScan
      FileDirPath: '$(Build.ArtifactStagingDirectory)'
      DisableRemediation: false