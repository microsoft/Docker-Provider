// Code generated by MockGen. DO NOT EDIT.
// Source: Docker-Provider/source/plugins/go/src/extension (interfaces: IFluentSocketWriter)

// Package extension is a generated GoMock package.
package extension

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockIFluentSocketWriter is a mock of IFluentSocketWriter interface.
type MockIFluentSocketWriter struct {
	ctrl     *gomock.Controller
	recorder *MockIFluentSocketWriterMockRecorder
}

// MockIFluentSocketWriterMockRecorder is the mock recorder for MockIFluentSocketWriter.
type MockIFluentSocketWriterMockRecorder struct {
	mock *MockIFluentSocketWriter
}

// NewMockIFluentSocketWriter creates a new mock instance.
func NewMockIFluentSocketWriter(ctrl *gomock.Controller) *MockIFluentSocketWriter {
	mock := &MockIFluentSocketWriter{ctrl: ctrl}
	mock.recorder = &MockIFluentSocketWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIFluentSocketWriter) EXPECT() *MockIFluentSocketWriterMockRecorder {
	return m.recorder
}

// Write mocks base method.
func (m *MockIFluentSocketWriter) Write(arg0 *FluentSocket, arg1 []byte) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Write", arg0, arg1)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Write indicates an expected call of Write.
func (mr *MockIFluentSocketWriterMockRecorder) Write(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Write", reflect.TypeOf((*MockIFluentSocketWriter)(nil).Write), arg0, arg1)
}

// WriteAndRead mocks base method.
func (m *MockIFluentSocketWriter) WriteAndRead(arg0 *FluentSocket, arg1 []byte) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteAndRead", arg0, arg1)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WriteAndRead indicates an expected call of WriteAndRead.
func (mr *MockIFluentSocketWriterMockRecorder) WriteAndRead(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteAndRead", reflect.TypeOf((*MockIFluentSocketWriter)(nil).WriteAndRead), arg0, arg1)
}

// connect mocks base method.
func (m *MockIFluentSocketWriter) connect(arg0 *FluentSocket) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "connect", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// connect indicates an expected call of connect.
func (mr *MockIFluentSocketWriterMockRecorder) connect(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "connect", reflect.TypeOf((*MockIFluentSocketWriter)(nil).connect), arg0)
}

// disConnect mocks base method.
func (m *MockIFluentSocketWriter) disConnect(arg0 *FluentSocket) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "disConnect", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// disConnect indicates an expected call of disConnect.
func (mr *MockIFluentSocketWriterMockRecorder) disConnect(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "disConnect", reflect.TypeOf((*MockIFluentSocketWriter)(nil).disConnect), arg0)
}

// read mocks base method.
func (m *MockIFluentSocketWriter) read(arg0 *FluentSocket) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "read", arg0)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// read indicates an expected call of read.
func (mr *MockIFluentSocketWriterMockRecorder) read(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "read", reflect.TypeOf((*MockIFluentSocketWriter)(nil).read), arg0)
}

// writeWithRetries mocks base method.
func (m *MockIFluentSocketWriter) writeWithRetries(arg0 *FluentSocket, arg1 []byte) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "writeWithRetries", arg0, arg1)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// writeWithRetries indicates an expected call of writeWithRetries.
func (mr *MockIFluentSocketWriterMockRecorder) writeWithRetries(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "writeWithRetries", reflect.TypeOf((*MockIFluentSocketWriter)(nil).writeWithRetries), arg0, arg1)
}
